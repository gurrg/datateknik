power :: Integer -> Integer -> Integer
power n k | k < 0 = error "power: negative argument"
power n 0 = 1
power n k = n * power n (k-1)

power1 :: Integer -> Integer -> Integer
power1 n k = product (replicate (fromInteger k) n) 

power2 :: Integer -> Integer -> Integer
power2 n k | k < 0 = error "power: negative argument"
power2 n 0 = 1
power2 n k | odd k  = n * power2 n (k-1)
           | even k = power2 (n * n) (div k 2)

comparePower1 :: Integer -> Integer -> Bool
comparePower1 n k = power n k == power1 n k

comparePower2 :: Integer -> Integer -> Bool
comparePower2 n k = power n k == power2 n k

comparePower3 :: Integer -> Integer -> Bool
comparePower3 n k = comparePower1 n k == comparePower2 n k

test :: Bool
test = comparePower3 (-1) 1 && comparePower3 0 0 && comparePower3 2 2 && comparePower3 0 2 && comparePower3 2 0
